basePath: /
definitions:
  dto.DataRespDto:
    type: object
  dto.ErrRespDto:
    properties:
      errors:
        additionalProperties: {}
        type: object
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.LoginInputDto:
    properties:
      email:
        maxLength: 255
        minLength: 1
        type: string
      password:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - email
    - password
    type: object
  dto.MessageRespDto:
    properties:
      data:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.MsInputDto:
    properties:
      description:
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    type: object
  dto.MsListRespDto:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.MsOutputDto'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.MsOutputDto:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.MsRespDto:
    properties:
      data:
        $ref: '#/definitions/dto.MsOutputDto'
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.UserInputDto:
    properties:
      email:
        maxLength: 255
        minLength: 1
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
      password:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UserListRespDto:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.UserOutputDto'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.UserOutputDto:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.UserRespDto:
    properties:
      data:
        $ref: '#/definitions/dto.UserOutputDto'
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
  description: The MSG provides tools for managing microservices.
  title: Go Microservice Gateway
  version: 0.1.0
paths:
  /api/CallMs:
    post:
      consumes:
      - application/json
      description: It provides an interface for calling registered microservices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Gateway
  /api/HealthCheck:
    get:
      consumes:
      - application/json
      description: Check the status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageRespDto'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      tags:
      - Gateway
  /api/Microservices:
    get:
      consumes:
      - application/json
      description: Get all existing microservices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MsListRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Microservices
    post:
      consumes:
      - application/json
      description: Create a microservice
      parameters:
      - description: Microservice dto object
        in: body
        name: microservice
        required: true
        schema:
          $ref: '#/definitions/dto.MsInputDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MsRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Microservices
  /api/Microservices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a microservice by ID
      parameters:
      - description: Microservice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Microservices
    get:
      consumes:
      - application/json
      description: Get one microservice by ID
      parameters:
      - description: Microservice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MsRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Microservices
    put:
      consumes:
      - application/json
      description: Update a microservice by ID
      parameters:
      - description: Microservice ID
        in: path
        name: id
        required: true
        type: string
      - description: Microservice dto object
        in: body
        name: microservice
        required: true
        schema:
          $ref: '#/definitions/dto.MsInputDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MsRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Microservices
  /api/Security/Login:
    post:
      consumes:
      - application/json
      description: User authentication
      parameters:
      - description: LoginInputDto dto object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginInputDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.DataRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      tags:
      - Security
  /api/Users:
    get:
      consumes:
      - application/json
      description: Get all existing users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserListRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: User dto object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserInputDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Users
  /api/Users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get one user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User dto object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserInputDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserRespDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrRespDto'
      security:
      - BearerAuth: []
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
